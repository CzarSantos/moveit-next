{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\nlw\\\\moveit-next\\\\src\\\\contexts\\\\ChallengesContext.tsx\";\n//solução para componetes conversarem entre si\nimport { createContext, useState } from 'react';\nimport challenges from '../../challenges.json';\n//criando contexto\nexport const ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider({\n  children\n}) {\n  const {\n    0: level,\n    1: setLevel\n  } = useState(1); //setar level, desafios completed\n\n  const {\n    0: currentExperience,\n    1: setCurrencie\n  } = useState(0);\n  const {\n    0: challengesCompleted,\n    1: setChallengesCompleted\n  } = useState(0); //\n\n  const {\n    0: activeChallenge,\n    1: setActiveChallenge\n  } = useState(null);\n\n  function levelUp() {\n    setLevel(level + 1);\n  } //pega dados do array desafios\n\n\n  function startNewChallenge() {\n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    const challenge = challenges[randomChallengeIndex];\n    setActiveChallenge(challenge);\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  return (\n    /*#__PURE__*/\n    //Todos elementos dentro do provider passam a ter os dados dentro do contexto\n    _jsxDEV(ChallengesContext.Provider, {\n      value: {\n        level,\n        currentExperience,\n        challengesCompleted,\n        levelUp,\n        startNewChallenge,\n        activeChallenge,\n        resetChallenge\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this)\n  );\n}","map":{"version":3,"sources":["C:/nlw/moveit-next/src/contexts/ChallengesContext.tsx"],"names":["createContext","useState","challenges","ChallengesContext","ChallengesProvider","children","level","setLevel","currentExperience","setCurrencie","challengesCompleted","setChallengesCompleted","activeChallenge","setActiveChallenge","levelUp","startNewChallenge","randomChallengeIndex","Math","floor","random","length","challenge","resetChallenge"],"mappings":";;AAAA;AACA,SAASA,aAAT,EAAwBC,QAAxB,QAAmD,OAAnD;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AAuBA;AACA,OAAO,MAAMC,iBAAiB,gBAAGH,aAAa,CAAC,EAAD,CAAvC;AAEP,OAAO,SAASI,kBAAT,CAA4B;AAAEC,EAAAA;AAAF,CAA5B,EAAmE;AACtE,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBN,QAAQ,CAAC,CAAD,CAAlC,CADsE,CAEtE;;AACA,QAAM;AAAA,OAACO,iBAAD;AAAA,OAAoBC;AAApB,MAAoCR,QAAQ,CAAC,CAAD,CAAlD;AACA,QAAM;AAAA,OAACS,mBAAD;AAAA,OAAsBC;AAAtB,MAAgDV,QAAQ,CAAC,CAAD,CAA9D,CAJsE,CAOtE;;AACA,QAAM;AAAA,OAACW,eAAD;AAAA,OAAkBC;AAAlB,MAAwCZ,QAAQ,CAAC,IAAD,CAAtD;;AAEA,WAASa,OAAT,GAAmB;AACfP,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AAEH,GAbqE,CActE;;;AACA,WAASS,iBAAT,GAA6B;AACzB,UAAMC,oBAAoB,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBjB,UAAU,CAACkB,MAAtC,CAA7B;AACA,UAAMC,SAAS,GAAGnB,UAAU,CAACc,oBAAD,CAA5B;AAEAH,IAAAA,kBAAkB,CAACQ,SAAD,CAAlB;AACH;;AAED,WAASC,cAAT,GAA0B;AACtBT,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACH;;AAED;AAAA;AACI;AAEA,YAAC,iBAAD,CAAmB,QAAnB;AAA4B,MAAA,KAAK,EAAE;AAC/BP,QAAAA,KAD+B;AAE/BE,QAAAA,iBAF+B;AAG/BE,QAAAA,mBAH+B;AAI/BI,QAAAA,OAJ+B;AAK/BC,QAAAA,iBAL+B;AAM/BH,QAAAA,eAN+B;AAO/BU,QAAAA;AAP+B,OAAnC;AAAA,gBAUKjB;AAVL;AAAA;AAAA;AAAA;AAAA;AAHJ;AAiBH","sourcesContent":["//solução para componetes conversarem entre si\r\nimport { createContext, useState, ReactNode } from 'react'\r\nimport challenges from '../../challenges.json';\r\n\r\n\r\ninterface Challenge {\r\n    type: 'body' | 'eye';\r\n    description: string;\r\n    amount: number;\r\n}\r\n\r\n\r\ninterface ChallengesContextData {\r\n    level: number;\r\n    currentExperience: number;\r\n    challengesCompleted: number;\r\n    activeChallenge: Challenge;\r\n    levelUp: () => void;\r\n    startNewChallenge: () => void;\r\n    resetChallenge: () => void;\r\n\r\n}\r\ninterface ChallengesProviderProps {\r\n    children: ReactNode;\r\n}\r\n//criando contexto\r\nexport const ChallengesContext = createContext({} as ChallengesContextData);\r\n\r\nexport function ChallengesProvider({ children }: ChallengesProviderProps) {\r\n    const [level, setLevel] = useState(1);\r\n    //setar level, desafios completed\r\n    const [currentExperience, setCurrencie] = useState(0);\r\n    const [challengesCompleted, setChallengesCompleted] = useState(0);\r\n\r\n\r\n    //\r\n    const [activeChallenge, setActiveChallenge] = useState(null)\r\n\r\n    function levelUp() {\r\n        setLevel(level + 1);\r\n\r\n    }\r\n    //pega dados do array desafios\r\n    function startNewChallenge() {\r\n        const randomChallengeIndex = Math.floor(Math.random() * challenges.length)\r\n        const challenge = challenges[randomChallengeIndex];\r\n\r\n        setActiveChallenge(challenge)\r\n    }\r\n\r\n    function resetChallenge() {\r\n        setActiveChallenge(null)\r\n    }\r\n\r\n    return (\r\n        //Todos elementos dentro do provider passam a ter os dados dentro do contexto\r\n\r\n        <ChallengesContext.Provider value={{\r\n            level,\r\n            currentExperience,\r\n            challengesCompleted,\r\n            levelUp,\r\n            startNewChallenge,\r\n            activeChallenge,\r\n            resetChallenge\r\n        }}\r\n        >\r\n            {children}\r\n        </ChallengesContext.Provider>\r\n\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}