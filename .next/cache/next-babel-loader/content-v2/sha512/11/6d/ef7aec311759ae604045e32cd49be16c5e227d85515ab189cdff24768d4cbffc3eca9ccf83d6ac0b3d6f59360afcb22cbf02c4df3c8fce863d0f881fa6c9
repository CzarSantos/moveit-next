{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"C:/nlw/moveit-next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\nlw\\\\moveit-next\\\\src\\\\components\\\\Countdown.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport styles from '../styles/components/Countdown.module.css';\nexport function Countdown() {\n  _s();\n\n  //funcionalidade minutos segundos\n  var _useState = useState(25 * 60),\n      time = _useState[0],\n      setTime = _useState[1]; //25 mn em sg\n  //armazena se contdown ativo ou não\n\n\n  var _useState2 = useState(false),\n      active = _useState2[0],\n      setActive = _useState2[1];\n\n  var minutes = Math.floor(time / 60); //pegar minutos arredondado\n\n  var seconds = time % 60; //resto da divisão\n\n  var _String$padStart$spli = String(minutes).padStart(2, '0').split(''),\n      _String$padStart$spli2 = _slicedToArray(_String$padStart$spli, 2),\n      minuteLeft = _String$padStart$spli2[0],\n      minuteRight = _String$padStart$spli2[1]; //se string não tiver 2 caracteres padStart preenche com 0 | passa posiçoes do vetor\n\n\n  var _String$padStart$spli3 = String(seconds).padStart(2, '0').split(''),\n      _String$padStart$spli4 = _slicedToArray(_String$padStart$spli3, 2),\n      secondsLeft = _String$padStart$spli4[0],\n      secondsRight = _String$padStart$spli4[1]; //se string não tiver 2 caracteres padStart preenche com 0\n  //Deccrescente\n\n\n  function startCountdown() {\n    setActive(true);\n  } //efeito colateral de decrecimo\n\n\n  useEffect(function () {\n    if (active && time > 0) {\n      setTimeout(function () {\n        setTime(time - 1);\n      }, 1000);\n    }\n  }, [active, time]); //executa quando valor de active mudar | e Time\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.countdownContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: minuteLeft\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: minuteRight\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \":\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: secondsLeft\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: secondsRight\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: styles.countdownButton,\n      onClick: startCountdown,\n      children: \"Iniciar um ciclo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Countdown, \"3EKOgXtVEHwLiPshhAxw55JPutw=\");\n\n_c = Countdown;\n\nvar _c;\n\n$RefreshReg$(_c, \"Countdown\");","map":{"version":3,"sources":["C:/nlw/moveit-next/src/components/Countdown.tsx"],"names":["useState","useEffect","styles","Countdown","time","setTime","active","setActive","minutes","Math","floor","seconds","String","padStart","split","minuteLeft","minuteRight","secondsLeft","secondsRight","startCountdown","setTimeout","countdownContainer","countdownButton"],"mappings":";;;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,MAAP,MAAmB,2CAAnB;AAEA,OAAO,SAASC,SAAT,GAAqB;AAAA;;AAExB;AAFwB,kBAGAH,QAAQ,CAAC,KAAK,EAAN,CAHR;AAAA,MAGjBI,IAHiB;AAAA,MAGXC,OAHW,iBAGiB;AAEzC;;;AALwB,mBAMIL,QAAQ,CAAC,KAAD,CANZ;AAAA,MAMjBM,MANiB;AAAA,MAMTC,SANS;;AASxB,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWN,IAAI,GAAG,EAAlB,CAAhB,CATwB,CASc;;AACtC,MAAMO,OAAO,GAAGP,IAAI,GAAG,EAAvB,CAVwB,CAUG;;AAVH,8BAYUQ,MAAM,CAACJ,OAAD,CAAN,CAAgBK,QAAhB,CAAyB,CAAzB,EAA4B,GAA5B,EAAiCC,KAAjC,CAAuC,EAAvC,CAZV;AAAA;AAAA,MAYjBC,UAZiB;AAAA,MAYLC,WAZK,8BAYqD;;;AAZrD,+BAaYJ,MAAM,CAACD,OAAD,CAAN,CAAgBE,QAAhB,CAAyB,CAAzB,EAA4B,GAA5B,EAAiCC,KAAjC,CAAuC,EAAvC,CAbZ;AAAA;AAAA,MAajBG,WAbiB;AAAA,MAaJC,YAbI,8BAauD;AAE/E;;;AACA,WAASC,cAAT,GAA0B;AACtBZ,IAAAA,SAAS,CAAC,IAAD,CAAT;AACH,GAlBuB,CAoBxB;;;AACAN,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAIK,MAAM,IAAIF,IAAI,GAAG,CAArB,EAAwB;AACpBgB,MAAAA,UAAU,CAAC,YAAM;AACbf,QAAAA,OAAO,CAACD,IAAI,GAAG,CAAR,CAAP;AACH,OAFS,EAEP,IAFO,CAAV;AAGH;AACJ,GANQ,EAMN,CAACE,MAAD,EAASF,IAAT,CANM,CAAT,CArBwB,CA2BN;;AAElB,sBACI;AAAA,4BACI;AAAK,MAAA,SAAS,EAAEF,MAAM,CAACmB,kBAAvB;AAAA,8BACI;AAAA,gCACI;AAAA,oBAAON;AAAP;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA,oBAAOC;AAAP;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALJ,eAMI;AAAA,gCACI;AAAA,oBAAOC;AAAP;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA,oBAAOC;AAAP;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cANJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAaI;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,SAAS,EAAEhB,MAAM,CAACoB,eAAxC;AAAyD,MAAA,OAAO,EAAEH,cAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAbJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAoBH;;GAjDehB,S;;KAAAA,S","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport styles from '../styles/components/Countdown.module.css'\r\n\r\nexport function Countdown() {\r\n\r\n    //funcionalidade minutos segundos\r\n    const [time, setTime] = useState(25 * 60)//25 mn em sg\r\n\r\n    //armazena se contdown ativo ou não\r\n    const [active, setActive] = useState(false);\r\n\r\n\r\n    const minutes = Math.floor(time / 60);//pegar minutos arredondado\r\n    const seconds = time % 60; //resto da divisão\r\n\r\n    const [minuteLeft, minuteRight] = String(minutes).padStart(2, '0').split('');//se string não tiver 2 caracteres padStart preenche com 0 | passa posiçoes do vetor\r\n    const [secondsLeft, secondsRight] = String(seconds).padStart(2, '0').split('');//se string não tiver 2 caracteres padStart preenche com 0\r\n\r\n    //Deccrescente\r\n    function startCountdown() {\r\n        setActive(true);\r\n    }\r\n\r\n    //efeito colateral de decrecimo\r\n    useEffect(() => {\r\n        if (active && time > 0) {\r\n            setTimeout(() => {\r\n                setTime(time - 1);\r\n            }, 1000)\r\n        }\r\n    }, [active, time])//executa quando valor de active mudar | e Time\r\n\r\n    return (\r\n        <div>\r\n            <div className={styles.countdownContainer}>\r\n                <div>\r\n                    <span>{minuteLeft}</span>\r\n                    <span>{minuteRight}</span>\r\n                </div>\r\n                <span>:</span>\r\n                <div>\r\n                    <span>{secondsLeft}</span>\r\n                    <span>{secondsRight}</span>\r\n                </div>\r\n            </div>\r\n\r\n            <button type=\"button\" className={styles.countdownButton} onClick={startCountdown}>\r\n                Iniciar um ciclo\r\n            </button>\r\n\r\n        </div>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}