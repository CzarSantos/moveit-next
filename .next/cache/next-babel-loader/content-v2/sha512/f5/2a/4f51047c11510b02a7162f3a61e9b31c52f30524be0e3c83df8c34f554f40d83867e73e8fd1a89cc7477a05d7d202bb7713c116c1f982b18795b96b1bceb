{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"C:/nlw/moveit-next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\nlw\\\\moveit-next\\\\src\\\\components\\\\Countdown.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useContext } from 'react';\nimport { ChallengesContext } from '../contexts/ChallengesContext';\nimport styles from '../styles/components/Countdown.module.css'; //variaveis\n\nvar countdownTimeout;\nexport function Countdown() {\n  _s();\n\n  var _useContext = useContext(ChallengesContext),\n      startNewChallenge = _useContext.startNewChallenge; //funcionalidade minutos segundos\n\n\n  var _useState = useState(0.1 * 60),\n      time = _useState[0],\n      setTime = _useState[1]; //25 mn em sg\n  //armazena se contdown ativo ou não\n\n\n  var _useState2 = useState(false),\n      isActive = _useState2[0],\n      setIsActive = _useState2[1]; //inicia como false | time 00\n\n\n  var _useState3 = useState(false),\n      hasFinished = _useState3[0],\n      setHasFinished = _useState3[1];\n\n  var minutes = Math.floor(time / 60); //pegar minutos arredondado\n\n  var seconds = time % 60; //resto da divisão\n\n  var _String$padStart$spli = String(minutes).padStart(2, '0').split(''),\n      _String$padStart$spli2 = _slicedToArray(_String$padStart$spli, 2),\n      minuteLeft = _String$padStart$spli2[0],\n      minuteRight = _String$padStart$spli2[1]; //se string não tiver 2 caracteres padStart preenche com 0 | passa posiçoes do vetor\n\n\n  var _String$padStart$spli3 = String(seconds).padStart(2, '0').split(''),\n      _String$padStart$spli4 = _slicedToArray(_String$padStart$spli3, 2),\n      secondsLeft = _String$padStart$spli4[0],\n      secondsRight = _String$padStart$spli4[1]; //se string não tiver 2 caracteres padStart preenche com 0\n  //Deccrescente\n\n\n  function startCountdown() {\n    setIsActive(true); //ativa\n  } //reset\n\n\n  function resetCountdown() {\n    clearTimeout(countdownTimeout); //cancela a execução do timeout\n\n    setIsActive(false); //desativa\n\n    setTime(0.1 * 60); //valor inicial\n  } //efeito colateral de decrecimo\n\n\n  useEffect(function () {\n    if (isActive && time > 0) {\n      countdownTimeout = setTimeout(function () {\n        //retorna para countdownTimeout\n        setTime(time - 1);\n      }, 1000);\n    } else if (isActive && time === 0) {\n      setHasFinished(true); //00 verdadeiro\n\n      setIsActive(false); //count finalizado\n\n      startNewChallenge();\n    }\n  }, [isActive, time]); //executa quando valor de active mudar | e Time\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.countdownContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: minuteLeft\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: minuteRight\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \":\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: secondsLeft\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: secondsRight\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), hasFinished ?\n    /*#__PURE__*/\n    //se contador terminou\n    _jsxDEV(\"button\", {\n      disabled: true,\n      className: styles.countdownButton,\n      children: \"Ciclo encerrado\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: isActive ?\n      /*#__PURE__*/\n      //lógica botão se ativo \n      _jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"\".concat(styles.countdownButton, \" \").concat(styles.countdownButtonActive),\n        onClick: resetCountdown,\n        children: \"Abandonar ciclo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 29\n      }, this) :\n      /*#__PURE__*/\n\n      /* senão */\n      _jsxDEV(\"button\", {\n        type: \"button\",\n        className: styles.countdownButton,\n        onClick: startCountdown,\n        children: \"Iniciar um ciclo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 33\n      }, this)\n    }, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n}\n/* verificado */\n\n_s(Countdown, \"cVu0hsDf1rnm10+qbfS96WIdEJo=\");\n\n_c = Countdown;\n\nvar _c;\n\n$RefreshReg$(_c, \"Countdown\");","map":{"version":3,"sources":["C:/nlw/moveit-next/src/components/Countdown.tsx"],"names":["useState","useEffect","useContext","ChallengesContext","styles","countdownTimeout","Countdown","startNewChallenge","time","setTime","isActive","setIsActive","hasFinished","setHasFinished","minutes","Math","floor","seconds","String","padStart","split","minuteLeft","minuteRight","secondsLeft","secondsRight","startCountdown","resetCountdown","clearTimeout","setTimeout","countdownContainer","countdownButton","countdownButtonActive"],"mappings":";;;;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,UAA9B,QAAgD,OAAhD;AACA,SAASC,iBAAT,QAAkC,+BAAlC;AACA,OAAOC,MAAP,MAAmB,2CAAnB,C,CAEA;;AACA,IAAIC,gBAAJ;AAEA,OAAO,SAASC,SAAT,GAAqB;AAAA;;AAAA,oBAEMJ,UAAU,CAACC,iBAAD,CAFhB;AAAA,MAEhBI,iBAFgB,eAEhBA,iBAFgB,EAKxB;;;AALwB,kBAMAP,QAAQ,CAAC,MAAM,EAAP,CANR;AAAA,MAMjBQ,IANiB;AAAA,MAMXC,OANW,iBAMkB;AAE1C;;;AARwB,mBASQT,QAAQ,CAAC,KAAD,CAThB;AAAA,MASjBU,QATiB;AAAA,MASPC,WATO,kBAUxB;;;AAVwB,mBAWcX,QAAQ,CAAC,KAAD,CAXtB;AAAA,MAWjBY,WAXiB;AAAA,MAWJC,cAXI;;AAcxB,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWR,IAAI,GAAG,EAAlB,CAAhB,CAdwB,CAcc;;AACtC,MAAMS,OAAO,GAAGT,IAAI,GAAG,EAAvB,CAfwB,CAeG;;AAfH,8BAiBUU,MAAM,CAACJ,OAAD,CAAN,CAAgBK,QAAhB,CAAyB,CAAzB,EAA4B,GAA5B,EAAiCC,KAAjC,CAAuC,EAAvC,CAjBV;AAAA;AAAA,MAiBjBC,UAjBiB;AAAA,MAiBLC,WAjBK,8BAiBqD;;;AAjBrD,+BAkBYJ,MAAM,CAACD,OAAD,CAAN,CAAgBE,QAAhB,CAAyB,CAAzB,EAA4B,GAA5B,EAAiCC,KAAjC,CAAuC,EAAvC,CAlBZ;AAAA;AAAA,MAkBjBG,WAlBiB;AAAA,MAkBJC,YAlBI,8BAkBuD;AAE/E;;;AACA,WAASC,cAAT,GAA0B;AACtBd,IAAAA,WAAW,CAAC,IAAD,CAAX,CADsB,CACJ;AACrB,GAvBuB,CAyBxB;;;AACA,WAASe,cAAT,GAA0B;AACtBC,IAAAA,YAAY,CAACtB,gBAAD,CAAZ,CADsB,CACS;;AAC/BM,IAAAA,WAAW,CAAC,KAAD,CAAX,CAFsB,CAEH;;AACnBF,IAAAA,OAAO,CAAC,MAAM,EAAP,CAAP,CAHsB,CAGJ;AAErB,GA/BuB,CAiCxB;;;AACAR,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAIS,QAAQ,IAAIF,IAAI,GAAG,CAAvB,EAA0B;AACtBH,MAAAA,gBAAgB,GAAGuB,UAAU,CAAC,YAAM;AAAC;AACjCnB,QAAAA,OAAO,CAACD,IAAI,GAAG,CAAR,CAAP;AACH,OAF4B,EAE1B,IAF0B,CAA7B;AAGH,KAJD,MAIO,IAAIE,QAAQ,IAAIF,IAAI,KAAK,CAAzB,EAA4B;AAC/BK,MAAAA,cAAc,CAAC,IAAD,CAAd,CAD+B,CACV;;AACrBF,MAAAA,WAAW,CAAC,KAAD,CAAX,CAF+B,CAEZ;;AACnBJ,MAAAA,iBAAiB;AAEpB;AACJ,GAXQ,EAWN,CAACG,QAAD,EAAWF,IAAX,CAXM,CAAT,CAlCwB,CA6CJ;;AAEpB,sBACI;AAAA,4BACI;AAAK,MAAA,SAAS,EAAEJ,MAAM,CAACyB,kBAAvB;AAAA,8BACI;AAAA,gCACI;AAAA,oBAAOR;AAAP;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA,oBAAOC;AAAP;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALJ,eAMI;AAAA,gCACI;AAAA,oBAAOC;AAAP;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA,oBAAOC;AAAP;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cANJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAaMZ,WAAW;AAAA;AAAI;AACb;AACI,MAAA,QAAQ,MADZ;AAEI,MAAA,SAAS,EAAER,MAAM,CAAC0B,eAFtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADS,gBAQL;AAAA,gBACOpB,QAAQ;AAAA;AAAI;AAEX;AACI,QAAA,IAAI,EAAC,QADT;AAEI,QAAA,SAAS,YAAKN,MAAM,CAAC0B,eAAZ,cAA+B1B,MAAM,CAAC2B,qBAAtC,CAFb;AAGI,QAAA,OAAO,EAAEL,cAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFO;AAAA;;AAUN;AAEG;AACI,QAAA,IAAI,EAAC,QADT;AAEI,QAAA,SAAS,EAAEtB,MAAM,CAAC0B,eAFtB;AAGI,QAAA,OAAO,EAAEL,cAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAbZ,qBArBZ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAgDH;AAED;;GAjGgBnB,S;;KAAAA,S","sourcesContent":["import { useState, useEffect, useContext } from 'react';\r\nimport { ChallengesContext } from '../contexts/ChallengesContext';\r\nimport styles from '../styles/components/Countdown.module.css'\r\n\r\n//variaveis\r\nlet countdownTimeout: NodeJS.Timeout;\r\n\r\nexport function Countdown() {\r\n\r\n    const { startNewChallenge } = useContext(ChallengesContext);\r\n\r\n\r\n    //funcionalidade minutos segundos\r\n    const [time, setTime] = useState(0.1 * 60)//25 mn em sg\r\n\r\n    //armazena se contdown ativo ou não\r\n    const [isActive, setIsActive] = useState(false);\r\n    //inicia como false | time 00\r\n    const [hasFinished, setHasFinished] = useState(false);\r\n\r\n\r\n    const minutes = Math.floor(time / 60);//pegar minutos arredondado\r\n    const seconds = time % 60; //resto da divisão\r\n\r\n    const [minuteLeft, minuteRight] = String(minutes).padStart(2, '0').split('');//se string não tiver 2 caracteres padStart preenche com 0 | passa posiçoes do vetor\r\n    const [secondsLeft, secondsRight] = String(seconds).padStart(2, '0').split('');//se string não tiver 2 caracteres padStart preenche com 0\r\n\r\n    //Deccrescente\r\n    function startCountdown() {\r\n        setIsActive(true);//ativa\r\n    }\r\n\r\n    //reset\r\n    function resetCountdown() {\r\n        clearTimeout(countdownTimeout);//cancela a execução do timeout\r\n        setIsActive(false);//desativa\r\n        setTime(0.1 * 60);//valor inicial\r\n\r\n    }\r\n\r\n    //efeito colateral de decrecimo\r\n    useEffect(() => {\r\n        if (isActive && time > 0) {\r\n            countdownTimeout = setTimeout(() => {//retorna para countdownTimeout\r\n                setTime(time - 1);\r\n            }, 1000)\r\n        } else if (isActive && time === 0) {\r\n            setHasFinished(true);//00 verdadeiro\r\n            setIsActive(false);//count finalizado\r\n            startNewChallenge();\r\n\r\n        }\r\n    }, [isActive, time])//executa quando valor de active mudar | e Time\r\n\r\n    return (\r\n        <div>\r\n            <div className={styles.countdownContainer}>\r\n                <div>\r\n                    <span>{minuteLeft}</span>\r\n                    <span>{minuteRight}</span>\r\n                </div>\r\n                <span>:</span>\r\n                <div>\r\n                    <span>{secondsLeft}</span>\r\n                    <span>{secondsRight}</span>\r\n                </div>\r\n            </div>\r\n\r\n            { hasFinished ? (//se contador terminou\r\n                <button\r\n                    disabled\r\n                    className={styles.countdownButton} >\r\n\r\n                    Ciclo encerrado\r\n                </button>\r\n            ) : (\r\n                    <>\r\n                        {  isActive ? (//lógica botão se ativo \r\n\r\n                            <button\r\n                                type=\"button\"\r\n                                className={`${styles.countdownButton} ${styles.countdownButtonActive}`}\r\n                                onClick={resetCountdown}>\r\n\r\n                                Abandonar ciclo\r\n                            </button>\r\n\r\n                        ) : (/* senão */\r\n\r\n                                <button\r\n                                    type=\"button\"\r\n                                    className={styles.countdownButton}\r\n                                    onClick={startCountdown}>\r\n\r\n                                    Iniciar um ciclo\r\n                                </button>\r\n                            )}\r\n\r\n                    </>\r\n                )}\r\n        </div>\r\n    );\r\n}\r\n\r\n/* verificado */"]},"metadata":{},"sourceType":"module"}