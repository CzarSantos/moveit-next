{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\nlw\\\\moveit-next\\\\src\\\\contexts\\\\ChallengesContext.tsx\";\n//soluÃ§Ã£o para componetes conversarem entre si\nimport { createContext, useState, useEffect } from 'react';\nimport Cookies from 'js-cookie';\nimport challenges from '../../challenges.json';\n//criando contexto\nexport const ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider({\n  children\n}) {\n  const {\n    0: level,\n    1: setLevel\n  } = useState(1); //setar level, desafios completed\n\n  const {\n    0: currentExperience,\n    1: setCurrentExperience\n  } = useState(0);\n  const {\n    0: challengesCompleted,\n    1: setChallengesCompleted\n  } = useState(0); //barra progresso\n  //\n\n  const {\n    0: activeChallenge,\n    1: setActiveChallenge\n  } = useState(null); //pontuaÃ§Ã£o \n\n  const experienceToNextLevel = Math.pow((level + 1) * 4, 2); //pedi permissÃ£o ao user | efeito colateral\n\n  useEffect(() => {\n    Notification.requestPermission();\n  }, []); //executa primeira funÃ§Ã£o uma unica vez\n  //salvar dados | cookies\n\n  useEffect(() => {\n    Cookies.set('level', String(level));\n    Cookies.set('currentExperience', String(currentExperience));\n    Cookies.set('challengesCompleted', String(challengesCompleted));\n  }, [level, currentExperience, challengesCompleted]); //executa quando houver alteraÃ§Ã£o de dados\n  //funÃ§Ãµes\n\n  function levelUp() {\n    setLevel(level + 1);\n  } //pega dados do array desafios\n\n\n  function startNewChallenge() {\n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    const challenge = challenges[randomChallengeIndex];\n    setActiveChallenge(challenge); //audio\n\n    new Audio('/notification.mp3').play(); //NotificaÃ§Ã£o\n\n    if (Notification.permission === 'granted') {\n      new Notification('Novo desafio ! ðŸ‘½ ðŸ‘»', {\n        body: `Valendo ${challenge.amount}xp!`\n      });\n    }\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  } //pega experiÃªncia, soma e armazena\n\n\n  function completedChallenge() {\n    if (!activeChallenge) {\n      return;\n    }\n\n    const {\n      amount\n    } = activeChallenge;\n    let finalExperience = currentExperience + amount; //soma xp\n\n    if (finalExperience >= experienceToNextLevel) {\n      finalExperience = finalExperience - experienceToNextLevel;\n      levelUp();\n    }\n\n    setCurrentExperience(finalExperience);\n    setActiveChallenge(null); //zera desafio\n\n    setChallengesCompleted(challengesCompleted + 1);\n  }\n\n  return (\n    /*#__PURE__*/\n    //Todos elementos dentro do provider passam a ter os dados dentro do contexto\n    _jsxDEV(ChallengesContext.Provider, {\n      value: {\n        level,\n        currentExperience,\n        challengesCompleted,\n        levelUp,\n        startNewChallenge,\n        activeChallenge,\n        resetChallenge,\n        experienceToNextLevel,\n        completedChallenge\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }, this)\n  );\n}\n/* verificado */","map":{"version":3,"sources":["C:/nlw/moveit-next/src/contexts/ChallengesContext.tsx"],"names":["createContext","useState","useEffect","Cookies","challenges","ChallengesContext","ChallengesProvider","children","level","setLevel","currentExperience","setCurrentExperience","challengesCompleted","setChallengesCompleted","activeChallenge","setActiveChallenge","experienceToNextLevel","Math","pow","Notification","requestPermission","set","String","levelUp","startNewChallenge","randomChallengeIndex","floor","random","length","challenge","Audio","play","permission","body","amount","resetChallenge","completedChallenge","finalExperience"],"mappings":"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","sourcesContent":["//soluÃ§Ã£o para componetes conversarem entre si\r\nimport { createContext, useState, ReactNode, useEffect } from 'react'\r\nimport Cookies from 'js-cookie';\r\nimport challenges from '../../challenges.json';\r\n\r\n\r\ninterface Challenge {\r\n    type: 'body' | 'eye';\r\n    description: string;\r\n    amount: number;\r\n}\r\ninterface ChallengesProviderProps {\r\n    children: ReactNode;\r\n}\r\n\r\ninterface ChallengesContextData {\r\n    level: number;\r\n    currentExperience: number;\r\n    challengesCompleted: number;\r\n    activeChallenge: Challenge;\r\n    experienceToNextLevel: number;\r\n    levelUp: () => void;\r\n    startNewChallenge: () => void;\r\n    resetChallenge: () => void;\r\n    completedChallenge: () => void;\r\n\r\n\r\n}\r\n\r\n//criando contexto\r\nexport const ChallengesContext = createContext({} as ChallengesContextData);\r\n\r\nexport function ChallengesProvider({ children }: ChallengesProviderProps) {\r\n    const [level, setLevel] = useState(1);\r\n    //setar level, desafios completed\r\n    const [currentExperience, setCurrentExperience] = useState(0);\r\n    const [challengesCompleted, setChallengesCompleted] = useState(0);//barra progresso\r\n\r\n\r\n    //\r\n    const [activeChallenge, setActiveChallenge] = useState(null)\r\n\r\n    //pontuaÃ§Ã£o \r\n    const experienceToNextLevel = Math.pow((level + 1) * 4, 2)\r\n\r\n    //pedi permissÃ£o ao user | efeito colateral\r\n    useEffect(() => {\r\n        Notification.requestPermission();\r\n    }, [])//executa primeira funÃ§Ã£o uma unica vez\r\n\r\n    //salvar dados | cookies\r\n    useEffect(() => {\r\n        Cookies.set('level', String(level));\r\n        Cookies.set('currentExperience', String(currentExperience));\r\n        Cookies.set('challengesCompleted', String(challengesCompleted));\r\n\r\n    }, [level, currentExperience, challengesCompleted]);//executa quando houver alteraÃ§Ã£o de dados\r\n\r\n    //funÃ§Ãµes\r\n    function levelUp() {\r\n        setLevel(level + 1);\r\n\r\n    }\r\n    //pega dados do array desafios\r\n    function startNewChallenge() {\r\n        const randomChallengeIndex = Math.floor(Math.random() * challenges.length)\r\n        const challenge = challenges[randomChallengeIndex];\r\n\r\n        setActiveChallenge(challenge)\r\n\r\n        //audio\r\n        new Audio('/notification.mp3').play();\r\n\r\n        //NotificaÃ§Ã£o\r\n        if (Notification.permission === 'granted') {\r\n            new Notification('Novo desafio ! ðŸ‘½ ðŸ‘»', {\r\n                body: `Valendo ${challenge.amount}xp!`\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    function resetChallenge() {\r\n        setActiveChallenge(null);\r\n    }\r\n\r\n    //pega experiÃªncia, soma e armazena\r\n    function completedChallenge() {\r\n        if (!activeChallenge) {\r\n            return;\r\n        }\r\n\r\n        const { amount } = activeChallenge;\r\n\r\n        let finalExperience = currentExperience + amount;//soma xp\r\n\r\n        if (finalExperience >= experienceToNextLevel) {\r\n            finalExperience = finalExperience - experienceToNextLevel;\r\n            levelUp();\r\n        }\r\n\r\n        setCurrentExperience(finalExperience);\r\n        setActiveChallenge(null);//zera desafio\r\n        setChallengesCompleted(challengesCompleted + 1);\r\n    }\r\n\r\n    return (\r\n        //Todos elementos dentro do provider passam a ter os dados dentro do contexto\r\n\r\n        <ChallengesContext.Provider value={{\r\n            level,\r\n            currentExperience,\r\n            challengesCompleted,\r\n            levelUp,\r\n            startNewChallenge,\r\n            activeChallenge,\r\n            resetChallenge,\r\n            experienceToNextLevel,\r\n            completedChallenge\r\n        }}\r\n        >\r\n            {children}\r\n        </ChallengesContext.Provider>\r\n\r\n    );\r\n}\r\n\r\n/* verificado */"]},"metadata":{},"sourceType":"module"}