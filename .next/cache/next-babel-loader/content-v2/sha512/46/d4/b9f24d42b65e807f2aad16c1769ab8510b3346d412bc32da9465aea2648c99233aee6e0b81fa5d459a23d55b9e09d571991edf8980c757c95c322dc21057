{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\nlw\\\\moveit-next\\\\src\\\\contexts\\\\ChallengesContext.tsx\",\n    _s = $RefreshSig$();\n\n//soluÃ§Ã£o para componetes conversarem entre si\nimport { createContext, useState, useEffect } from 'react';\nimport challenges from '../../challenges.json';\n//criando contexto\nexport var ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState(1),\n      level = _useState[0],\n      setLevel = _useState[1]; //setar level, desafios completed\n\n\n  var _useState2 = useState(0),\n      currentExperience = _useState2[0],\n      setCurrentExperience = _useState2[1];\n\n  var _useState3 = useState(0),\n      challengesCompleted = _useState3[0],\n      setChallengesCompleted = _useState3[1]; //barra progresso\n  //\n\n\n  var _useState4 = useState(null),\n      activeChallenge = _useState4[0],\n      setActiveChallenge = _useState4[1]; //pontuaÃ§Ã£o \n\n\n  var experienceToNextLevel = Math.pow((level + 1) * 4, 2); //pedi permissÃ£o ao user | efeito colateral\n\n  useEffect(function () {\n    Notification.requestPermission();\n  }, []); //executa primeira funÃ§Ã£o uma unica vez\n  //funÃ§Ãµes\n\n  function levelUp() {\n    setLevel(level + 1);\n  } //pega dados do array desafios\n\n\n  function startNewChallenge() {\n    var randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    var challenge = challenges[randomChallengeIndex];\n    setActiveChallenge(challenge); //NotificaÃ§Ã£o\n\n    if (Notification.permission === 'granted') {\n      new Notification('Novo desafio ! ðŸ‘½ ðŸ‘»', {\n        body: \"Valendo \".concat(challenge.amount, \"xp!\")\n      });\n    }\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  } //pega experiencia, soma e armazena\n\n\n  function completedChallenge() {\n    if (!activeChallenge) {\n      return;\n    }\n\n    var amount = activeChallenge.amount;\n    var finalExperience = currentExperience + amount; //soma xp\n\n    if (finalExperience >= experienceToNextLevel) {\n      finalExperience = finalExperience - experienceToNextLevel;\n      levelUp();\n    }\n\n    setCurrentExperience(finalExperience);\n    setActiveChallenge(null); //zera desafio\n\n    setChallengesCompleted(challengesCompleted + 1);\n  }\n\n  return (\n    /*#__PURE__*/\n    //Todos elementos dentro do provider passam a ter os dados dentro do contexto\n    _jsxDEV(ChallengesContext.Provider, {\n      value: {\n        level: level,\n        currentExperience: currentExperience,\n        challengesCompleted: challengesCompleted,\n        levelUp: levelUp,\n        startNewChallenge: startNewChallenge,\n        activeChallenge: activeChallenge,\n        resetChallenge: resetChallenge,\n        experienceToNextLevel: experienceToNextLevel,\n        completedChallenge: completedChallenge\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this)\n  );\n}\n/* verificado */\n\n_s(ChallengesProvider, \"mXQLPpEuqfijIicM0DJuMSLmJHY=\");\n\n_c = ChallengesProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChallengesProvider\");","map":{"version":3,"sources":["C:/nlw/moveit-next/src/contexts/ChallengesContext.tsx"],"names":["createContext","useState","useEffect","challenges","ChallengesContext","ChallengesProvider","children","level","setLevel","currentExperience","setCurrentExperience","challengesCompleted","setChallengesCompleted","activeChallenge","setActiveChallenge","experienceToNextLevel","Math","pow","Notification","requestPermission","levelUp","startNewChallenge","randomChallengeIndex","floor","random","length","challenge","permission","body","amount","resetChallenge","completedChallenge","finalExperience"],"mappings":"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","sourcesContent":["//soluÃ§Ã£o para componetes conversarem entre si\r\nimport { createContext, useState, ReactNode, useEffect } from 'react'\r\nimport challenges from '../../challenges.json';\r\n\r\n\r\ninterface Challenge {\r\n    type: 'body' | 'eye';\r\n    description: string;\r\n    amount: number;\r\n}\r\ninterface ChallengesProviderProps {\r\n    children: ReactNode;\r\n}\r\n\r\ninterface ChallengesContextData {\r\n    level: number;\r\n    currentExperience: number;\r\n    challengesCompleted: number;\r\n    activeChallenge: Challenge;\r\n    experienceToNextLevel: number;\r\n    levelUp: () => void;\r\n    startNewChallenge: () => void;\r\n    resetChallenge: () => void;\r\n    completedChallenge: () => void;\r\n\r\n\r\n}\r\n\r\n//criando contexto\r\nexport const ChallengesContext = createContext({} as ChallengesContextData);\r\n\r\nexport function ChallengesProvider({ children }: ChallengesProviderProps) {\r\n    const [level, setLevel] = useState(1);\r\n    //setar level, desafios completed\r\n    const [currentExperience, setCurrentExperience] = useState(0);\r\n    const [challengesCompleted, setChallengesCompleted] = useState(0);//barra progresso\r\n\r\n\r\n    //\r\n    const [activeChallenge, setActiveChallenge] = useState(null)\r\n\r\n    //pontuaÃ§Ã£o \r\n    const experienceToNextLevel = Math.pow((level + 1) * 4, 2)\r\n\r\n    //pedi permissÃ£o ao user | efeito colateral\r\n    useEffect(() => {\r\n        Notification.requestPermission();\r\n    }, [])//executa primeira funÃ§Ã£o uma unica vez\r\n\r\n\r\n\r\n\r\n    //funÃ§Ãµes\r\n\r\n    function levelUp() {\r\n        setLevel(level + 1);\r\n\r\n    }\r\n    //pega dados do array desafios\r\n    function startNewChallenge() {\r\n        const randomChallengeIndex = Math.floor(Math.random() * challenges.length)\r\n        const challenge = challenges[randomChallengeIndex];\r\n\r\n        setActiveChallenge(challenge)\r\n\r\n        //NotificaÃ§Ã£o\r\n        if (Notification.permission === 'granted') {\r\n            new Notification('Novo desafio ! ðŸ‘½ ðŸ‘»', {\r\n                body: `Valendo ${challenge.amount}xp!`\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    function resetChallenge() {\r\n        setActiveChallenge(null);\r\n    }\r\n\r\n    //pega experiencia, soma e armazena\r\n    function completedChallenge() {\r\n        if (!activeChallenge) {\r\n            return;\r\n        }\r\n\r\n        const { amount } = activeChallenge;\r\n\r\n        let finalExperience = currentExperience + amount;//soma xp\r\n\r\n        if (finalExperience >= experienceToNextLevel) {\r\n            finalExperience = finalExperience - experienceToNextLevel;\r\n            levelUp();\r\n        }\r\n\r\n        setCurrentExperience(finalExperience);\r\n        setActiveChallenge(null);//zera desafio\r\n        setChallengesCompleted(challengesCompleted + 1);\r\n    }\r\n\r\n    return (\r\n        //Todos elementos dentro do provider passam a ter os dados dentro do contexto\r\n\r\n        <ChallengesContext.Provider value={{\r\n            level,\r\n            currentExperience,\r\n            challengesCompleted,\r\n            levelUp,\r\n            startNewChallenge,\r\n            activeChallenge,\r\n            resetChallenge,\r\n            experienceToNextLevel,\r\n            completedChallenge\r\n        }}\r\n        >\r\n            {children}\r\n        </ChallengesContext.Provider>\r\n\r\n    );\r\n}\r\n\r\n/* verificado */"]},"metadata":{},"sourceType":"module"}