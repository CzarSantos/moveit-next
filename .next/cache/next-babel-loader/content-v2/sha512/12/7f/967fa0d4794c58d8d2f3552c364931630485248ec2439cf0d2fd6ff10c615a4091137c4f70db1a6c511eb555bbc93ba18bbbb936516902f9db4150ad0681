{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\nlw\\\\moveit-next\\\\src\\\\contexts\\\\ChallengesContext.tsx\";\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n//soluÃ§Ã£o para componetes conversarem entre si\nimport { createContext, useState, useEffect } from 'react';\nimport Cookies from 'js-cookie';\nimport challenges from '../../challenges.json';\nimport { LevelUpModal } from '../components/LevelUpModal'; //propriedades\n\n//criando contexto\nexport const ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider(_ref) {\n  var _rest$level, _rest$currentExperien, _rest$challengesCompl;\n\n  let {\n    children\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"children\"]);\n\n  //rest: todoas as outra propriedades\n  //setar level, desafios completed\n  const {\n    0: level,\n    1: setLevel\n  } = useState((_rest$level = rest.level) !== null && _rest$level !== void 0 ? _rest$level : 1); //se naÃµ existir usa 1\n\n  const {\n    0: currentExperience,\n    1: setCurrentExperience\n  } = useState((_rest$currentExperien = rest.currentExperience) !== null && _rest$currentExperien !== void 0 ? _rest$currentExperien : 0);\n  const {\n    0: challengesCompleted,\n    1: setChallengesCompleted\n  } = useState((_rest$challengesCompl = rest.challengesCompleted) !== null && _rest$challengesCompl !== void 0 ? _rest$challengesCompl : 0); //barra progresso\n  //\n\n  const {\n    0: activeChallenge,\n    1: setActiveChallenge\n  } = useState(null); //quando subir de level abrir page\n\n  const {\n    0: isLevelUpModalOpen,\n    1: setIsLevelUpModalOpen\n  } = useState(false); //pontuaÃ§Ã£o \n\n  const experienceToNextLevel = Math.pow((level + 1) * 4, 2); //pedi permissÃ£o ao user | efeito colateral\n\n  useEffect(() => {\n    Notification.requestPermission();\n  }, []); //executa primeira funÃ§Ã£o uma unica vez\n  //salvar dados | cookies\n\n  useEffect(() => {\n    Cookies.set('level', String(level));\n    Cookies.set('currentExperience', String(currentExperience));\n    Cookies.set('challengesCompleted', String(challengesCompleted));\n  }, [level, currentExperience, challengesCompleted]); //executa quando houver alteraÃ§Ã£o de dados\n  //funÃ§Ãµes\n\n  function levelUp() {\n    setLevel(level + 1);\n    setIsLevelUpModalOpen(true); //exibe page\n  } //fechar page de levelUP\n\n\n  function closeLevelUpModal() {\n    setIsLevelUpModalOpen(false);\n  } //pega dados do array desafios\n\n\n  function startNewChallenge() {\n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    const challenge = challenges[randomChallengeIndex];\n    setActiveChallenge(challenge); //audio\n\n    new Audio('/notification.mp3').play(); //NotificaÃ§Ã£o\n\n    if (Notification.permission === 'granted') {\n      new Notification('Novo desafio ! ðŸ‘½ ðŸ‘»', {\n        body: `Valendo ${challenge.amount}xp!`\n      });\n    }\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  } //pega experiÃªncia, soma e armazena\n\n\n  function completedChallenge() {\n    if (!activeChallenge) {\n      return;\n    }\n\n    const {\n      amount\n    } = activeChallenge;\n    let finalExperience = currentExperience + amount; //soma xp\n\n    if (finalExperience >= experienceToNextLevel) {\n      finalExperience = finalExperience - experienceToNextLevel;\n      levelUp();\n    }\n\n    setCurrentExperience(finalExperience);\n    setActiveChallenge(null); //zera desafio\n\n    setChallengesCompleted(challengesCompleted + 1);\n  }\n\n  return (\n    /*#__PURE__*/\n    //Todos elementos dentro do provider passam a ter os dados dentro do contexto\n    _jsxDEV(ChallengesContext.Provider, {\n      value: {\n        level,\n        currentExperience,\n        challengesCompleted,\n        levelUp,\n        startNewChallenge,\n        activeChallenge,\n        resetChallenge,\n        experienceToNextLevel,\n        completedChallenge,\n        closeLevelUpModal\n      },\n      children: [children, isLevelUpModalOpen && /*#__PURE__*/_jsxDEV(LevelUpModal, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 36\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }, this)\n  );\n}\n/* vlevelUpModal: pagina ao subir de level*/","map":{"version":3,"sources":["C:/nlw/moveit-next/src/contexts/ChallengesContext.tsx"],"names":["createContext","useState","useEffect","Cookies","challenges","LevelUpModal","ChallengesContext","ChallengesProvider","children","rest","level","setLevel","currentExperience","setCurrentExperience","challengesCompleted","setChallengesCompleted","activeChallenge","setActiveChallenge","isLevelUpModalOpen","setIsLevelUpModalOpen","experienceToNextLevel","Math","pow","Notification","requestPermission","set","String","levelUp","closeLevelUpModal","startNewChallenge","randomChallengeIndex","floor","random","length","challenge","Audio","play","permission","body","amount","resetChallenge","completedChallenge","finalExperience"],"mappings":"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","sourcesContent":["//soluÃ§Ã£o para componetes conversarem entre si\r\nimport { createContext, useState, ReactNode, useEffect } from 'react'\r\nimport Cookies from 'js-cookie';\r\nimport challenges from '../../challenges.json';\r\nimport { LevelUpModal } from '../components/LevelUpModal';\r\n\r\n\r\n//propriedades\r\ninterface Challenge {\r\n    type: 'body' | 'eye';\r\n    description: string;\r\n    amount: number;\r\n}\r\ninterface ChallengesProviderProps {\r\n    children: ReactNode;\r\n    level: number;\r\n    currentExperience: number;\r\n    challengesCompleted: number;\r\n}\r\n\r\n\r\ninterface ChallengesContextData {\r\n    level: number;\r\n    currentExperience: number;\r\n    challengesCompleted: number;\r\n    activeChallenge: Challenge;\r\n    experienceToNextLevel: number;\r\n    levelUp: () => void;\r\n    startNewChallenge: () => void;\r\n    resetChallenge: () => void;\r\n    completedChallenge: () => void;\r\n    closeLevelUpModal: () => void;\r\n\r\n\r\n}\r\n\r\n//criando contexto\r\nexport const ChallengesContext = createContext({} as ChallengesContextData);\r\n\r\nexport function ChallengesProvider({ children, ...rest }: ChallengesProviderProps) {//rest: todoas as outra propriedades\r\n    //setar level, desafios completed\r\n    const [level, setLevel] = useState(rest.level ?? 1);//se naÃµ existir usa 1\r\n    const [currentExperience, setCurrentExperience] = useState(rest.currentExperience ?? 0);\r\n    const [challengesCompleted, setChallengesCompleted] = useState(rest.challengesCompleted ?? 0);//barra progresso\r\n\r\n\r\n    //\r\n    const [activeChallenge, setActiveChallenge] = useState(null)\r\n\r\n    //quando subir de level abrir page\r\n    const [isLevelUpModalOpen, setIsLevelUpModalOpen] = useState(false);\r\n\r\n\r\n    //pontuaÃ§Ã£o \r\n    const experienceToNextLevel = Math.pow((level + 1) * 4, 2)\r\n\r\n    //pedi permissÃ£o ao user | efeito colateral\r\n    useEffect(() => {\r\n        Notification.requestPermission();\r\n    }, [])//executa primeira funÃ§Ã£o uma unica vez\r\n\r\n    //salvar dados | cookies\r\n    useEffect(() => {\r\n        Cookies.set('level', String(level));\r\n        Cookies.set('currentExperience', String(currentExperience));\r\n        Cookies.set('challengesCompleted', String(challengesCompleted));\r\n\r\n    }, [level, currentExperience, challengesCompleted]);//executa quando houver alteraÃ§Ã£o de dados\r\n\r\n    //funÃ§Ãµes\r\n    function levelUp() {\r\n        setLevel(level + 1);\r\n        setIsLevelUpModalOpen(true);//exibe page\r\n\r\n    }\r\n\r\n    //fechar page de levelUP\r\n    function closeLevelUpModal() {\r\n        setIsLevelUpModalOpen(false);\r\n    }\r\n    //pega dados do array desafios\r\n    function startNewChallenge() {\r\n        const randomChallengeIndex = Math.floor(Math.random() * challenges.length)\r\n        const challenge = challenges[randomChallengeIndex];\r\n\r\n        setActiveChallenge(challenge)\r\n\r\n        //audio\r\n        new Audio('/notification.mp3').play();\r\n\r\n        //NotificaÃ§Ã£o\r\n        if (Notification.permission === 'granted') {\r\n            new Notification('Novo desafio ! ðŸ‘½ ðŸ‘»', {\r\n                body: `Valendo ${challenge.amount}xp!`\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    function resetChallenge() {\r\n        setActiveChallenge(null);\r\n    }\r\n\r\n    //pega experiÃªncia, soma e armazena\r\n    function completedChallenge() {\r\n        if (!activeChallenge) {\r\n            return;\r\n        }\r\n\r\n        const { amount } = activeChallenge;\r\n\r\n        let finalExperience = currentExperience + amount;//soma xp\r\n\r\n        if (finalExperience >= experienceToNextLevel) {\r\n            finalExperience = finalExperience - experienceToNextLevel;\r\n            levelUp();\r\n        }\r\n\r\n        setCurrentExperience(finalExperience);\r\n        setActiveChallenge(null);//zera desafio\r\n        setChallengesCompleted(challengesCompleted + 1);\r\n    }\r\n\r\n    return (\r\n        //Todos elementos dentro do provider passam a ter os dados dentro do contexto\r\n\r\n        <ChallengesContext.Provider value={{\r\n            level,\r\n            currentExperience,\r\n            challengesCompleted,\r\n            levelUp,\r\n            startNewChallenge,\r\n            activeChallenge,\r\n            resetChallenge,\r\n            experienceToNextLevel,\r\n            completedChallenge,\r\n            closeLevelUpModal\r\n        }}\r\n        >\r\n            {children}\r\n            {isLevelUpModalOpen && <LevelUpModal />}\r\n        </ChallengesContext.Provider>\r\n\r\n    );\r\n}\r\n\r\n/* vlevelUpModal: pagina ao subir de level*/"]},"metadata":{},"sourceType":"module"}