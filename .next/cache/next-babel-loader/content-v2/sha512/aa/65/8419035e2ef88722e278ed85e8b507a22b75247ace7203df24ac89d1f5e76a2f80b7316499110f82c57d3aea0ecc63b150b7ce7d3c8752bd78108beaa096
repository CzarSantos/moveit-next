{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\nlw\\\\moveit-next\\\\src\\\\contexts\\\\CountdownContext.tsx\",\n    _s = $RefreshSig$();\n\n//Contexto\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport { ChallengesContext } from \"./ChallengesContext\"; //formato dos dados retornados\n\nexport var CountdownContext = /*#__PURE__*/createContext({}); //variaveis\n\nvar countdownTimeout;\nexport function CountdownProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useContext = useContext(ChallengesContext),\n      startNewChallenge = _useContext.startNewChallenge; //funcionalidade minutos segundos\n\n\n  var _useState = useState(0.1 * 60),\n      time = _useState[0],\n      setTime = _useState[1]; //25 mn em sg\n  //armazena se contdown ativo ou não\n\n\n  var _useState2 = useState(false),\n      isActive = _useState2[0],\n      setIsActive = _useState2[1]; //inicia como false | time 00\n\n\n  var _useState3 = useState(false),\n      hasFinished = _useState3[0],\n      setHasFinished = _useState3[1];\n\n  var minutes = Math.floor(time / 60); //pegar minutos arredondado\n\n  var seconds = time % 60; //resto da divisão\n  //Funções\n  //Deccrescente\n\n  function startCountdown() {\n    setIsActive(true); //ativa\n  } //reset\n\n\n  function resetCountdown() {\n    clearTimeout(countdownTimeout); //cancela a execução do timeout\n\n    setIsActive(false); //desativa\n\n    setTime(0.1 * 60); //valor inicial\n\n    setHasFinished(false);\n  } //efeito colateral de decrecimo\n\n\n  useEffect(function () {\n    if (isActive && time > 0) {\n      countdownTimeout = setTimeout(function () {\n        //retorna para countdownTimeout\n        setTime(time - 1);\n      }, 1000);\n    } else if (isActive && time === 0) {\n      setHasFinished(true); //00 verdadeiro\n\n      setIsActive(false); //count finalizado\n\n      startNewChallenge();\n    }\n  }, [isActive, time]); //executa quando valor de active mudar | e Time\n\n  return /*#__PURE__*/_jsxDEV(CountdownContext.Provider, {\n    value: {\n      minutes: minutes,\n      seconds: seconds,\n      hasFinished: hasFinished,\n      isActive: isActive,\n      startCountdown: startCountdown,\n      resetCountdown: resetCountdown\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CountdownProvider, \"cVu0hsDf1rnm10+qbfS96WIdEJo=\");\n\n_c = CountdownProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CountdownProvider\");","map":{"version":3,"sources":["C:/nlw/moveit-next/src/contexts/CountdownContext.tsx"],"names":["createContext","useContext","useEffect","useState","ChallengesContext","CountdownContext","countdownTimeout","CountdownProvider","children","startNewChallenge","time","setTime","isActive","setIsActive","hasFinished","setHasFinished","minutes","Math","floor","seconds","startCountdown","resetCountdown","clearTimeout","setTimeout"],"mappings":";;;;;AAAA;AAEA,SAASA,aAAT,EAAmCC,UAAnC,EAA+CC,SAA/C,EAA0DC,QAA1D,QAA0E,OAA1E;AAEA,SAASC,iBAAT,QAAkC,qBAAlC,C,CAGA;;AAcA,OAAO,IAAMC,gBAAgB,gBAAGL,aAAa,CAAC,EAAD,CAAtC,C,CAEP;;AACA,IAAIM,gBAAJ;AAEA,OAAO,SAASC,iBAAT,OAAiE;AAAA;;AAAA,MAApCC,QAAoC,QAApCA,QAAoC;;AAAA,oBACtCP,UAAU,CAACG,iBAAD,CAD4B;AAAA,MAC5DK,iBAD4D,eAC5DA,iBAD4D,EAIpE;;;AAJoE,kBAK5CN,QAAQ,CAAC,MAAM,EAAP,CALoC;AAAA,MAK7DO,IAL6D;AAAA,MAKvDC,OALuD,iBAK1B;AAE1C;;;AAPoE,mBAQpCR,QAAQ,CAAC,KAAD,CAR4B;AAAA,MAQ7DS,QAR6D;AAAA,MAQnDC,WARmD,kBASpE;;;AAToE,mBAU9BV,QAAQ,CAAC,KAAD,CAVsB;AAAA,MAU7DW,WAV6D;AAAA,MAUhDC,cAVgD;;AAapE,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWR,IAAI,GAAG,EAAlB,CAAhB,CAboE,CAa9B;;AACtC,MAAMS,OAAO,GAAGT,IAAI,GAAG,EAAvB,CAdoE,CAczC;AAG3B;AACA;;AACA,WAASU,cAAT,GAA0B;AACtBP,IAAAA,WAAW,CAAC,IAAD,CAAX,CADsB,CACJ;AACrB,GArBmE,CAuBpE;;;AACA,WAASQ,cAAT,GAA0B;AACtBC,IAAAA,YAAY,CAAChB,gBAAD,CAAZ,CADsB,CACS;;AAC/BO,IAAAA,WAAW,CAAC,KAAD,CAAX,CAFsB,CAEH;;AACnBF,IAAAA,OAAO,CAAC,MAAM,EAAP,CAAP,CAHsB,CAGJ;;AAClBI,IAAAA,cAAc,CAAC,KAAD,CAAd;AAEH,GA9BmE,CAgCpE;;;AACAb,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAIU,QAAQ,IAAIF,IAAI,GAAG,CAAvB,EAA0B;AACtBJ,MAAAA,gBAAgB,GAAGiB,UAAU,CAAC,YAAM;AAAC;AACjCZ,QAAAA,OAAO,CAACD,IAAI,GAAG,CAAR,CAAP;AACH,OAF4B,EAE1B,IAF0B,CAA7B;AAGH,KAJD,MAIO,IAAIE,QAAQ,IAAIF,IAAI,KAAK,CAAzB,EAA4B;AAC/BK,MAAAA,cAAc,CAAC,IAAD,CAAd,CAD+B,CACV;;AACrBF,MAAAA,WAAW,CAAC,KAAD,CAAX,CAF+B,CAEZ;;AACnBJ,MAAAA,iBAAiB;AAEpB;AACJ,GAXQ,EAWN,CAACG,QAAD,EAAWF,IAAX,CAXM,CAAT,CAjCoE,CA4ChD;;AAEpB,sBACI,QAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAE;AAC9BM,MAAAA,OAAO,EAAPA,OAD8B;AAE9BG,MAAAA,OAAO,EAAPA,OAF8B;AAG9BL,MAAAA,WAAW,EAAXA,WAH8B;AAI9BF,MAAAA,QAAQ,EAARA,QAJ8B;AAK9BQ,MAAAA,cAAc,EAAdA,cAL8B;AAM9BC,MAAAA,cAAc,EAAdA;AAN8B,KAAlC;AAAA,cASKb;AATL;AAAA;AAAA;AAAA;AAAA,UADJ;AAaH;;GA3DeD,iB;;KAAAA,iB","sourcesContent":["//Contexto\r\n\r\nimport { createContext, ReactNode, useContext, useEffect, useState } from \"react\";\r\nimport { Countdown } from \"../components/Countdown\";\r\nimport { ChallengesContext } from \"./ChallengesContext\";\r\n\r\n\r\n//formato dos dados retornados\r\ninterface CountdownContextDate {\r\n    minutes: number;\r\n    seconds: number\r\n    hasFinished: boolean;\r\n    isActive: boolean;\r\n    startCountdown: () => void;\r\n    resetCountdown: () => void;\r\n}\r\n\r\ninterface CountdownProviderProps {\r\n    children: ReactNode;\r\n}\r\n\r\nexport const CountdownContext = createContext({} as CountdownContextDate)\r\n\r\n//variaveis\r\nlet countdownTimeout: NodeJS.Timeout;\r\n\r\nexport function CountdownProvider({ children }: CountdownProviderProps) {\r\n    const { startNewChallenge } = useContext(ChallengesContext);\r\n\r\n\r\n    //funcionalidade minutos segundos\r\n    const [time, setTime] = useState(0.1 * 60)//25 mn em sg\r\n\r\n    //armazena se contdown ativo ou não\r\n    const [isActive, setIsActive] = useState(false);\r\n    //inicia como false | time 00\r\n    const [hasFinished, setHasFinished] = useState(false);\r\n\r\n\r\n    const minutes = Math.floor(time / 60);//pegar minutos arredondado\r\n    const seconds = time % 60; //resto da divisão\r\n\r\n\r\n    //Funções\r\n    //Deccrescente\r\n    function startCountdown() {\r\n        setIsActive(true);//ativa\r\n    }\r\n\r\n    //reset\r\n    function resetCountdown() {\r\n        clearTimeout(countdownTimeout);//cancela a execução do timeout\r\n        setIsActive(false);//desativa\r\n        setTime(0.1 * 60);//valor inicial\r\n        setHasFinished(false);\r\n\r\n    }\r\n\r\n    //efeito colateral de decrecimo\r\n    useEffect(() => {\r\n        if (isActive && time > 0) {\r\n            countdownTimeout = setTimeout(() => {//retorna para countdownTimeout\r\n                setTime(time - 1);\r\n            }, 1000)\r\n        } else if (isActive && time === 0) {\r\n            setHasFinished(true);//00 verdadeiro\r\n            setIsActive(false);//count finalizado\r\n            startNewChallenge();\r\n\r\n        }\r\n    }, [isActive, time])//executa quando valor de active mudar | e Time\r\n\r\n    return (\r\n        <CountdownContext.Provider value={{\r\n            minutes,\r\n            seconds,\r\n            hasFinished,\r\n            isActive,\r\n            startCountdown,\r\n            resetCountdown\r\n\r\n        }}>\r\n            {children}\r\n        </CountdownContext.Provider>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}