{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\nlw\\\\moveit-next\\\\src\\\\contexts\\\\ChallengesContext.tsx\",\n    _s = $RefreshSig$();\n\n//solução para componetes conversarem entre si\nimport { createContext, useState } from 'react';\nexport var ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState(1),\n      level = _useState[0],\n      setLevel = _useState[1]; //setar level, desafios completed\n\n\n  var _useState2 = useState(0),\n      currentExperience = _useState2[0],\n      setCurrencie = _useState2[1];\n\n  var _useState3 = useState(0),\n      challengesCompleted = _useState3[0],\n      setChallengesCompleted = _useState3[1];\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  return (\n    /*#__PURE__*/\n    //Todos elementos dentro do provider passam a ter os dados dentro do contexto\n    _jsxDEV(ChallengesContext.Provider, {\n      value: {\n        level: level,\n        currentExperience: currentExperience,\n        challengesCompleted: challengesCompleted,\n        levelUp: levelUp\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }, this)\n  );\n}\n\n_s(ChallengesProvider, \"Tu8joa+D8vuVyz+yg8d6levvZoQ=\");\n\n_c = ChallengesProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChallengesProvider\");","map":{"version":3,"sources":["C:/nlw/moveit-next/src/contexts/ChallengesContext.tsx"],"names":["createContext","useState","ChallengesContext","ChallengesProvider","children","level","setLevel","currentExperience","setCurrencie","challengesCompleted","setChallengesCompleted","levelUp"],"mappings":";;;;;AAAA;AACA,SAASA,aAAT,EAAwBC,QAAxB,QAAmD,OAAnD;AAEA,OAAO,IAAMC,iBAAiB,gBAAGF,aAAa,CAAC,EAAD,CAAvC;AAQP,OAAO,SAASG,kBAAT,OAAmE;AAAA;;AAAA,MAArCC,QAAqC,QAArCA,QAAqC;;AAAA,kBAC5CH,QAAQ,CAAC,CAAD,CADoC;AAAA,MAC/DI,KAD+D;AAAA,MACxDC,QADwD,iBAEtE;;;AAFsE,mBAG5BL,QAAQ,CAAC,CAAD,CAHoB;AAAA,MAG/DM,iBAH+D;AAAA,MAG5CC,YAH4C;;AAAA,mBAIhBP,QAAQ,CAAC,CAAD,CAJQ;AAAA,MAI/DQ,mBAJ+D;AAAA,MAI1CC,sBAJ0C;;AAMtE,WAASC,OAAT,GAAmB;AACfL,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AAEH;;AAED;AAAA;AACI;AACA,YAAC,iBAAD,CAAmB,QAAnB;AAA4B,MAAA,KAAK,EAAE;AAAEA,QAAAA,KAAK,EAALA,KAAF;AAASE,QAAAA,iBAAiB,EAAjBA,iBAAT;AAA4BE,QAAAA,mBAAmB,EAAnBA,mBAA5B;AAAiDE,QAAAA,OAAO,EAAPA;AAAjD,OAAnC;AAAA,gBACKP;AADL;AAAA;AAAA;AAAA;AAAA;AAFJ;AAOH;;GAlBeD,kB;;KAAAA,kB","sourcesContent":["//solução para componetes conversarem entre si\r\nimport { createContext, useState, ReactNode } from 'react'\r\n\r\nexport const ChallengesContext = createContext({});\r\n\r\ninterface ChallengesProviderProps {\r\n    children: ReactNode;\r\n}\r\n\r\n\r\n\r\nexport function ChallengesProvider({ children }: ChallengesProviderProps) {\r\n    const [level, setLevel] = useState(1);\r\n    //setar level, desafios completed\r\n    const [currentExperience, setCurrencie] = useState(0);\r\n    const [challengesCompleted, setChallengesCompleted] = useState(0);\r\n\r\n    function levelUp() {\r\n        setLevel(level + 1);\r\n\r\n    }\r\n\r\n    return (\r\n        //Todos elementos dentro do provider passam a ter os dados dentro do contexto\r\n        <ChallengesContext.Provider value={{ level, currentExperience, challengesCompleted, levelUp }}>\r\n            {children}\r\n        </ChallengesContext.Provider>\r\n\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}